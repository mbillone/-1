Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    Andrew Baldwin
    David Chan
    Matt Billone

D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    The help command shows different commands for common situations with descriptions of the command.

2.  What does `-ag` cause `git help` to do?

    Shows an uncategorized list of every available command, common or otherwise.



G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

   Status reports the current state of the Stage, Unstaged, and Untracked categories.

2.  What does `git add names.txt` do?

    It adds the names.txt file to the Stage, taking it out of Untracked.

3.  What does `git commit -m "Add our names."` do?

    It takes all of the currently staged files and records their changes, 
        while adding the message "Add our names."



Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    Add with the . adds all new or modified files, excluding deleted files.

5.  What does `git commit` (without -m) do?

    Commit without the -m opens up the vim editor where multi-line commit more detailed
        commit messages can be added, and if nothing is entered the commit is aborted.

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    "git commit"

7.  What does `git log do`?

    Log lists the version history, for this it lists the two commits
         along with the author & timestamp.




H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged** - Items committed and ready for pushing.

    names.txt
    birthdays.txt

    **Unstaged** - Items added but not committed.

    movies.txt

    **Untracked** - New items not added yet.
    foods.txt

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    Only the staged files names.txt and birthdays.txt will be committed.

2.  What command do you run to stage changes?

    "git add"

3.  What command do you run to unstage changes?

    "git reset"



Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    Displays the changes made to the unstaged files.

2.  What does `git diff --cached` display?

    Displays the changes made to the staged files.

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    "git reset names.txt"
    "git add movies.txt"

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    Since the file has been modified it is moved to unstaged and needs to be re-added
        for commit and update.

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    Status now lists under Unstaged: movies.txt as modified and names.txt as deleted,
        since names.txt was deleted.

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    Status now lists movies.txt as deleted under Unstaged and has the new file last-movies.text under  
        Untracked. As it movies.txt was deleted and a new file last-movies.txt was created.

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    "git add ." 
    "git commit -m "SupaHotFire Commit""

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    They all hold staged files ready to be committed to the local repo and be pushed to
        the public repo.

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    Because the user may want to keep some items Unstaged/Untracked.If an item is still
     being worked on or was just made as a test, it does not need to be committed and
        therefore, pushed to the public repo.


I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    It undid the last commit and moved all items back the stage.

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    It undid the last commit and reset the local repo to the state it was in before
        the last commit.

2.  What is the difference between `--hard` and `--soft`?

    Soft only undoes the latest commit and moves the committed files back to the stage,
        hard undoes the commit and deletes/removes and reset all files to the state they
        were in at the state of the commit before the latest one.

3.  What do you think `HEAD` means?
    
    HEAD is the current commit.

4.  What do you think `HEAD^` means?

    HEAD is the parent of the current commit, or the one that came before it.

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
